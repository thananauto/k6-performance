# Simple workflow for deploying static content to GitHub Pages
name: Static HTML Report - k6

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["main"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        
      - name: Setup Pages
        uses: actions/configure-pages@v3
        
      - name: Docker cache
        uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: Pull grafana/k6 docker images
        run: sudo docker pull grafana/k6

      - name: run the K6 scripts
        run: |
         docker run --name k6 --user "$(id -u $USER)" -v $(pwd):/src --workdir "/src" -i grafana/k6 run /src/scripts/blazedemo.js
         docker wait k6

      - name: check report files
        if: always()
        continue-on-error: true
        run: |
          ls -a
          cd result && ls -a  
        
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire repository
          path: 'result'
          
      - name: Deploy to GitHub Pages
        if: always()
        id: deployment
        uses: actions/deploy-pages@v2
        
      - name: Remove the k6 container
        if: always()
        run: |
          sudo docker stop k6 && sudo docker rm k6      
